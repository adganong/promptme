from django.db                  import models
from django.conf                import settings
from django.urls                import reverse
from rest_framework.reverse     import reverse as api_reverse
from django.db.models.aggregates import Count
from random import randint


# Create your models here.
class Genre(models.Model):
    # Hidden: PK or id. This is auto generated by django when making models
    genre_name  = models.CharField(max_length=256, null=False, blank=False)
    parent_id   = models.ForeignKey("self", null=True, blank=True, related_name='genre_parent')

    def __str__(self):
        return str(self.genre_name)

    def get_api_url(self, request=None):
        return api_reverse("api-genres:genres-list", request=request)


class PieceType(models.Model):
    # Hidden: PK or id. This is auto generated by django when making models
    piece_type_name = models.CharField(max_length=256, null=True)

    def __str__(self):
        return str(self.piece_type_name)

    def get_api_url(self, request=None):
        return api_reverse("api-piece_types:piece_types-list", request=request)


# PROMPT PIECE #############################################################################################
class RandomPromptPieceManager(models.Manager):

    def genre_and_type(self, genre_id, type_id):
        count = self.all().filter(piece_genre=genre_id).filter(piece_type=type_id).count()
        if count != 0:
            random_index = randint(1, count)
            result = super().get_queryset()\
                .filter(piece_genre=genre_id)\
                .filter(piece_type=type_id)[random_index-1:random_index]
        else:
            result = None
        return result

    def random(self):
        count = self.all().count()
        random_index = randint(1, count - 1)
        return super().get_queryset().filter(pk=random_index)

    def type(self, type_id):
        count = self.all().filter(piece_type=type_id).count()
        if count != 0:
            random_index = randint(1, count)
            result = super().get_queryset().filter(piece_type=type_id)[random_index - 1:random_index]
        else:
            result = None
        return result

    def genre(self, genre_id):
        count = self.all().filter(piece_genre=genre_id).count()
        if count != 0:
            random_index = randint(1, count)
            result = super().get_queryset().filter(piece_genre=genre_id)[random_index - 1:random_index]
        else:
            result = None
        return result




class PromptPiece(models.Model):
    # Hidden: PK or id. This is auto generated by django when making models
    piece_type          = models.ForeignKey(PieceType, on_delete=models.CASCADE)
    piece_genre         = models.ForeignKey(Genre, on_delete=models.CASCADE)
    piece_name          = models.CharField(max_length=256, null=False, blank=False)
    piece_description   = models.TextField(max_length=1000, null=True, blank=True)

    # Model Manager
    randomPieceBy = RandomPromptPieceManager()
    objects = models.Manager()
    # Example of doing random!
    # PromptPiece.objects.random()

    '''def __str__(self):
        return str(self.piece_name)'''

    def get_api_url(self, request=None):
        return api_reverse("api-prompt_pieces:prompt_pieces-list", request=request)
# PROMPT PIECE #############################################################################################


# Built Prompt #############################################################################################
# I will need this evnetually, but for now it can be done a different way

class RandomBuiltPromptManager(models.Manager):

    def genre_and_type(self, genre_id, type_id):
        pass
        '''count = self.all().filter(piece_genre=genre_id).filter(piece_type=type_id).count()
        if count != 0:
            random_index = randint(1, count)
            result = super().get_queryset() \
                         .filter(piece_genre=genre_id) \
                         .filter(piece_type=type_id)[random_index - 1:random_index]
        else:
            result = None
        return result

    def random(self):
        count = self.all().count()
        random_index = randint(1, count - 1)
        return super().get_queryset().filter(pk=random_index)

    def type(self, type_id):
        count = self.all().filter(piece_type=type_id).count()
        if count != 0:
            random_index = randint(1, count)
            result = super().get_queryset().filter(piece_type=type_id)[random_index - 1:random_index]
        else:
            result = None
        return result

    def genre(self, genre_id):
        count = self.all().filter(piece_genre=genre_id).count()
        if count != 0:
            random_index = randint(1, count)
            result = super().get_queryset().filter(piece_genre=genre_id)[random_index - 1:random_index]
        else:
            result = None
        return result'''

class BuiltPrompt(models.Model):
    prompt_name     = models.CharField(max_length=256, null=True, blank=True)
    is_wild_card    = models.NullBooleanField(null=True, blank=True)
    genre           = models.ForeignKey(Genre, null=True,  blank=False, related_name='prompt_genre')
    prompt_person   = models.ForeignKey(PromptPiece, null=False, blank=False, related_name='prompt_person')
    prompt_place    = models.ForeignKey(PromptPiece, null=False, blank=False, related_name='prompt_place')
    prompt_thing    = models.ForeignKey(PromptPiece, null=False, blank=False, related_name='prompt_thing')
    prompt_scenario = models.ForeignKey(PromptPiece, null=False, blank=False, related_name='prompt_scenario')

    def __str__(self):
        return str(
            self.prompt_name    + "\n\n " +
            "\tPerson:\t\t\t"    + self.prompt_person.piece_name     + " \n " +
            "\tPlace:\t\t\t"     + self.prompt_place.piece_name      + " \n " +
            "\tThing:\t\t\t"     + self.prompt_thing.piece_name      + " \n " +
            "\tScenario:\t\t"  + self.prompt_scenario.piece_name
        )

    def get_api_url(self, request=None):
        return api_reverse("api-built_prompts:built_prompts-list", request=request)
#####################################################################################################################




